Experiment -6 Write C program to compute the First and Follow Sets for the given Grammar.
Source Code:

#include<stdio.h>
#include<ctype.h>
#include<string.h>
#define MAX_PRODUCTIONS 10
#define MAX_SYMBOLS 10
#define SYMBOL_LEN 10
// Assuming each non-terminal is a single uppercase letter,
// and terminals are lowercase letters plus special symbols.
char productions[MAX_PRODUCTIONS][2][SYMBOL_LEN]; // To store entered productions
char first[MAX_SYMBOLS][MAX_SYMBOLS]; // First set results
char follow[MAX_SYMBOLS][MAX_SYMBOLS]; // Follow set results
int n_productions; // Number of productions
// These are our Function prototypes
void calc_first(char symbol, int q1, int q2);
void calc_follow(char symbol);
void addToResult(char* result, char symbol);
int main()
{
 int i;
 char choice;
 char symbol;
 printf("Enter the number of productions: ");
 scanf("%d%c", &n_productions, &choice); // %c to capture newline
 for(i = 0; i < n_productions; i++)
{
 printf("Enter production %d (e.g., E=T): ", i + 1);
 scanf("%s", productions[i][0]); // Left side of production
 printf(" -> ");
 scanf("%s", productions[i][1]); // Right side of production
 }
 do {
 printf("\n1. First Set\n2. Follow Set\n3. Exit\n Enter your choice: ");
 scanf("%d%c", &i, &choice); // Capturing choice and newline
 switch(i)
{
 case 1:
 printf("Enter the symbol to find FIRST: ");
 scanf("%c%c", &symbol, &choice);
 printf("FIRST(%c) = { ", symbol);
 calc_first(symbol, 0, 0);
 printf("}\n");
 break;
 case 2:
 printf("Enter the symbol to find FOLLOW: ");
 scanf("%c%c", &symbol, &choice);
 printf("FOLLOW(%c) = { ", symbol);
 calc_follow(symbol);
 printf("}\n");
 break;
 default:
 printf("Exiting...\n");
 return 0;
 }
 }
while(1);
 return 0;
}
void calc_first(char symbol, int q1, int q2) {
 // Implementation here (it's quite involved, requires checking productions)
}
void calc_follow(char symbol) {
 // Similarly, implement FOLLOW set calculation based on grammar rules
}
void addToResult(char* result, char symbol) 
{
 int len = strlen(result);
 for(int i = 0; i < len; i++) 
{
 if(result[i] == symbol) 
{
 return; // Symbol already in result
 }
 }
 result[len] = symbol;
 result[len + 1] = '\0'; // Keep the string null-terminated
}

Output: For below grammar
1. E -> TX
2. X -> +TX | 系
3. T -> FY
4. Y -> *FY | 系
5. F -> (E) | id
First(E) = { (, id }
First(X) = { +, 系 }
First(T) = { (, id }
First(Y) = { *, 系 }
First(F) = { (, id }
Follow(E) = { $, ) }
Follow(X) = { $, ) }
Follow(T) = { +, $, ) }
Follow(Y) = { +, $, ) }
Follow(F) = { *, +, $, ) }
